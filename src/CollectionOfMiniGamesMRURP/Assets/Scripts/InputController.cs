//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Interaction"",
            ""id"": ""88b1ad0a-64c0-43cf-8359-e179c31b8e09"",
            ""actions"": [
                {
                    ""name"": ""ReloadSpace"",
                    ""type"": ""Button"",
                    ""id"": ""484bbbe9-2600-45e1-99ca-eb7d54c1f052"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReturnUI"",
                    ""type"": ""Button"",
                    ""id"": ""6b59380a-868d-4233-9f1b-4e40f184a306"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f114047-ca73-4165-9cf9-1b04ed452b61"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadSpace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df86e2a1-b128-4536-8047-ea418e057447"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReturnUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_ReloadSpace = m_Interaction.FindAction("ReloadSpace", throwIfNotFound: true);
        m_Interaction_ReturnUI = m_Interaction.FindAction("ReturnUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interaction
    private readonly InputActionMap m_Interaction;
    private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
    private readonly InputAction m_Interaction_ReloadSpace;
    private readonly InputAction m_Interaction_ReturnUI;
    public struct InteractionActions
    {
        private @InputController m_Wrapper;
        public InteractionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ReloadSpace => m_Wrapper.m_Interaction_ReloadSpace;
        public InputAction @ReturnUI => m_Wrapper.m_Interaction_ReturnUI;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
            @ReloadSpace.started += instance.OnReloadSpace;
            @ReloadSpace.performed += instance.OnReloadSpace;
            @ReloadSpace.canceled += instance.OnReloadSpace;
            @ReturnUI.started += instance.OnReturnUI;
            @ReturnUI.performed += instance.OnReturnUI;
            @ReturnUI.canceled += instance.OnReturnUI;
        }

        private void UnregisterCallbacks(IInteractionActions instance)
        {
            @ReloadSpace.started -= instance.OnReloadSpace;
            @ReloadSpace.performed -= instance.OnReloadSpace;
            @ReloadSpace.canceled -= instance.OnReloadSpace;
            @ReturnUI.started -= instance.OnReturnUI;
            @ReturnUI.performed -= instance.OnReturnUI;
            @ReturnUI.canceled -= instance.OnReturnUI;
        }

        public void RemoveCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    public interface IInteractionActions
    {
        void OnReloadSpace(InputAction.CallbackContext context);
        void OnReturnUI(InputAction.CallbackContext context);
    }
}
